{{- define "webhooks_resources" }}
cpu: 10m
memory: 50Mi
{{- end }}
  
{{- if (.Values.global.enabledModules | has "vertical-pod-autoscaler-crd") }}
---
apiVersion: autoscaling.k8s.io/v1
kind: VerticalPodAutoscaler
metadata:
  name: webhooks
  namespace: d8-{{ .Chart.Name }}
  {{- include "helm_lib_module_labels" (list . (dict "app" "webhooks" "workload-resource-policy.deckhouse.io" "master")) | nindent 2 }}
spec:
  targetRef:
    apiVersion: "apps/v1"
    kind: Deployment
    name: webhooks
  updatePolicy:
    updateMode: "Auto"
  resourcePolicy:
    containerPolicies:
      - containerName: webhooks
        minAllowed:
          {{- include "webhooks_resources" . | nindent 8 }}
        maxAllowed:
          cpu: 20m
          memory: 100Mi
{{- end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: webhooks
  namespace: d8-{{ .Chart.Name }}
  {{- include "helm_lib_module_labels" (list . (dict "app" "webhooks" )) | nindent 2 }}
spec:
  {{- include "helm_lib_deployment_on_master_strategy_and_replicas_for_ha" . | nindent 2 }}
  selector:
    matchLabels:
      app: webhooks
  template:
    metadata:
      annotations:
        checksum/ca: {{ .Values.sdsReplicatedVolume.internal.customWebhookCert.ca | sha256sum | quote }}
      labels:
        app: webhooks
    spec:
      {{- include "helm_lib_priority_class" (tuple . "system-cluster-critical") | nindent 6 }}
      {{- include "helm_lib_tolerations" (tuple . "any-node" "with-uninitialized" "with-cloud-provider-uninitialized") | nindent 6 }}
      {{- include "helm_lib_node_selector" (tuple . "master") | nindent 6 }}
      {{- include "helm_lib_pod_anti_affinity_for_ha" (list . (dict "app" "webhooks")) | nindent 6 }}
      containers:
      - name: webhooks
        command:
          - /webhooks
          - -tls-cert-file=/etc/webhook/certs/tls.crt
          - -tls-key-file=/etc/webhook/certs/tls.key
        image: {{ include "helm_lib_module_image" (list . "webhooks") }}
        imagePullPolicy: IfNotPresent
        volumeMounts:
          - name: webhook-certs
            mountPath: /etc/webhook/certs
            readOnly: true
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8443
            scheme: HTTPS
          initialDelaySeconds: 5
          failureThreshold: 2
          periodSeconds: 1
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8443
            scheme: HTTPS
          periodSeconds: 1
          failureThreshold: 3
        ports:
          - name: http
            containerPort: 8443
            protocol: TCP
        resources:
          requests:
            {{- include "helm_lib_module_ephemeral_storage_only_logs" . | nindent 12 }}
{{- if not ( .Values.global.enabledModules | has "vertical-pod-autoscaler-crd") }}
            {{- include "webhooks_resources" . | nindent 12 }}
{{- end }}
      imagePullSecrets:
        - name: {{ .Chart.Name }}-module-registry
      serviceAccount: webhooks
      serviceAccountName: webhooks
      volumes:
        - name: webhook-certs
          secret:
            secretName: webhooks-https-certs