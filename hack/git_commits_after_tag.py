#!/usr/bin/env python3

# Copyright 2025 Flant JSC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# run from repository root

"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–º–∏—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –≤—Ö–æ–¥—è—Ç –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–≥.

–°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:
1. –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ –≤–µ—Ç–∫—É main
2. –í—ã–ø–æ–ª–Ω—è–µ—Ç git fetch –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
3. –ù–∞—Ö–æ–¥–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–≥
4. –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–∏—Ç–æ–≤ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ–≥–∞
"""

import subprocess
import sys
import re
from typing import List, Optional, Tuple


def run_git_command(command: List[str], cwd: str = None) -> Tuple[bool, str]:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç git –∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    try:
        result = subprocess.run(
            command,
            cwd=cwd,
            capture_output=True,
            text=True,
            check=True
        )
        return True, result.stdout.strip()
    except subprocess.CalledProcessError as e:
        return False, e.stderr.strip()


def get_current_branch() -> Optional[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –≤–µ—Ç–∫—É."""
    success, output = run_git_command(["git", "branch", "--show-current"])
    if success and output:
        return output
    return None


def switch_to_main() -> bool:
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ –≤–µ—Ç–∫—É main."""
    print("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–µ—Ç–∫—É main...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–µ—Ç–∫–∞ main
    success, _ = run_git_command(["git", "show-ref", "--verify", "--quiet", "refs/heads/main"])
    if not success:
        # –ü—Ä–æ–±—É–µ–º origin/main
        success, _ = run_git_command(["git", "show-ref", "--verify", "--quiet", "refs/remotes/origin/main"])
        if not success:
            print("‚ùå –í–µ—Ç–∫–∞ main –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ main
    success, error = run_git_command(["git", "checkout", "main"])
    if not success:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ main: {error}")
        return False
    
    print("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –≤–µ—Ç–∫—É main")
    return True


def fetch_updates() -> bool:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç git fetch –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π."""
    print("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (git fetch)...")
    
    success, error = run_git_command(["git", "fetch", "--all"])
    if not success:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ git fetch: {error}")
        return False
    
    print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    return True


def get_latest_tag() -> Optional[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–≥ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏."""
    print("üîç –ü–æ–∏—Å–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ–≥–∞...")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ–≥–∏, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–µ
    success, output = run_git_command([
        "git", "tag", "--sort=-version:refname", "--merged"
    ])
    
    if not success or not output:
        print("‚ö†Ô∏è  –¢–µ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return None
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ç–µ–≥ (—Å–∞–º—ã–π –Ω–æ–≤—ã–π)
    tags = output.split('\n')
    latest_tag = tags[0].strip()
    
    print(f"‚úÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–≥: {latest_tag}")
    return latest_tag


def get_commits_after_tag(tag: str) -> List[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–∏—Ç–æ–≤ –ø–æ—Å–ª–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–µ–≥–∞."""
    print(f"üîç –ü–æ–∏—Å–∫ –∫–æ–º–º–∏—Ç–æ–≤ –ø–æ—Å–ª–µ —Ç–µ–≥–∞ {tag}...")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–∏—Ç—ã –ø–æ—Å–ª–µ —Ç–µ–≥–∞
    success, output = run_git_command([
        "git", "log", f"{tag}..HEAD", "--oneline", "--no-merges"
    ])
    
    if not success:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–º–∏—Ç–æ–≤: {output}")
        return []
    
    if not output:
        print("‚úÖ –ö–æ–º–º–∏—Ç–æ–≤ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return []
    
    commits = [line.strip() for line in output.split('\n') if line.strip()]
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(commits)} –∫–æ–º–º–∏—Ç–æ–≤ –ø–æ—Å–ª–µ —Ç–µ–≥–∞ {tag}")
    
    return commits


def format_commit_info(commits: List[str]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–º–∏—Ç–∞—Ö –¥–ª—è –≤—ã–≤–æ–¥–∞."""
    if not commits:
        return "–ö–æ–º–º–∏—Ç–æ–≤ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    
    result = []
    result.append(f"\nüìã –°–ø–∏—Å–æ–∫ –∫–æ–º–º–∏—Ç–æ–≤ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ–≥–∞ ({len(commits)} –∫–æ–º–º–∏—Ç–æ–≤):")
    result.append("=" * 60)
    
    for i, commit in enumerate(commits, 1):
        # –†–∞–∑–±–∏—Ä–∞–µ–º –∫–æ–º–º–∏—Ç: hash –∏ message
        parts = commit.split(' ', 1)
        if len(parts) == 2:
            commit_hash = parts[0]
            message = parts[1]
            result.append(f"{i:2d}. {commit_hash[:8]} - {message}")
        else:
            result.append(f"{i:2d}. {commit}")
    
    result.append("=" * 60)
    return "\n".join(result)


def get_commit_details(commits: List[str]) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–º–∏—Ç–∞—Ö."""
    if not commits:
        return ""
    
    result = []
    result.append("\nüìä –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–º–∏—Ç–∞—Ö:")
    result.append("=" * 60)
    
    for i, commit in enumerate(commits[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
        commit_hash = commit.split(' ')[0]
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–º–∏—Ç–µ
        success, details = run_git_command([
            "git", "show", "--stat", "--no-patch", commit_hash
        ])
        
        if success:
            lines = details.split('\n')
            commit_info = lines[0] if lines else commit
            result.append(f"\n{i}. {commit_info}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏–π
            for line in lines[1:]:
                if line.strip() and ('file' in line.lower() or 'insertion' in line.lower() or 'deletion' in line.lower()):
                    result.append(f"   {line.strip()}")
    
    if len(commits) > 10:
        result.append(f"\n... –∏ –µ—â–µ {len(commits) - 10} –∫–æ–º–º–∏—Ç–æ–≤")
    
    result.append("=" * 60)
    return "\n".join(result)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞."""
    print("üöÄ –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–∏—Ç–æ–≤ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ–≥–∞")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    success, _ = run_git_command(["git", "rev-parse", "--git-dir"])
    if not success:
        print("‚ùå –û—à–∏–±–∫–∞: —Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —è–≤–ª—è–µ—Ç—Å—è git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º")
        return 1
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ç–∫—É
    current_branch = get_current_branch()
    if current_branch:
        print(f"üìç –¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞: {current_branch}")
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ main
    if not switch_to_main():
        return 1
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if not fetch_updates():
        return 1
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–≥
    latest_tag = get_latest_tag()
    if not latest_tag:
        print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–≥–∏. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–æ–º–º–∏—Ç—ã –≤ –≤–µ—Ç–∫–µ main.")
        # –ï—Å–ª–∏ —Ç–µ–≥–æ–≤ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–æ–º–º–∏—Ç—ã –≤ main
        success, output = run_git_command([
            "git", "log", "--oneline", "--no-merges", "-20"
        ])
        if success and output:
            commits = [line.strip() for line in output.split('\n') if line.strip()]
            print(format_commit_info(commits))
        return 0
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–∏—Ç—ã –ø–æ—Å–ª–µ —Ç–µ–≥–∞
    commits = get_commits_after_tag(latest_tag)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print(format_commit_info(commits))
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    if commits:
        print(get_commit_details(commits))
    
    print("\n‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    return 0


if __name__ == "__main__":
    exit(main())
