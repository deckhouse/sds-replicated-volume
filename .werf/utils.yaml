{{ define "utils:checkout-git" }}
  # Clone just the repository's .git folder
  - git clone --no-checkout --depth 1 --branch {{ .branch }} {{ .repo }} /git-repo.tmp
  # Move the .git folder to the directory with the files.
  - mv /git-repo.tmp/.git {{ .folder }}/
  # Delete the temporary directory
  - rmdir /git-repo.tmp
  - cd {{ .folder }}
    # git thinks all files are deleted, this reverts the state of the repo to HEAD.
    # WARNING: any local changes to the files will be lost.
  - git reset --hard HEAD
  - git config --global url."https://github.com/".insteadOf git://github.com/
  - git config --global user.email "builder@deckhouse.io"
  - git config --global user.name "deckhouse"
  # cleanup all submodules directories, checked out by werf
  # script from https://stackoverflow.com/a/53899440
  - |
    SUBMODULES_BRANCHES=()
    # .submodules is an list of (submodule1-name=submodule1-branch submodule2-name=)
    # If branch is not set then using branch from .git-submodules file
    {{- range $submod := $.submodules | default "" | splitList " " }}
    SUBMODULES_BRANCHES+=( {{ $submod }} )
    {{- end }}

    echo "Processing submodules: ${SUBMODULES_BRANCHES[@]}"
    git -C "{{ .folder }}" config -f .gitmodules --get-regexp '^submodule\..*\.path$' |
        while read -r KEY MODULE_PATH
        do
            # If the module's path exists, remove it.
            # This is done b/c the module's path is currently
            # not a valid git repo and adding the submodule will cause an error.
            [ -d "${MODULE_PATH}" ] && rm -rf "${MODULE_PATH}"

            NAME="$(echo "${KEY}" | sed 's/^submodule\.\(.*\)\.path$/\1/')"

            url_key="$(echo "${KEY}" | sed 's/\.path$/.url/')"
            branch_key="$(echo "${KEY}" | sed 's/\.path$/.branch/')"

            URL="$(git config -f .gitmodules --get "${url_key}")"
            BRANCH="$(git config -f .gitmodules --get "${branch_key}" || echo "master")"
            for submod in "${SUBMODULES_BRANCHES[@]}"; do
              submod_name=${submod%=*}
              submod_branch=${submod#*=}

              if [ -n "${submod_branch}" -a "${NAME}"=="${submod_name}" ]; then
                echo "Override BRANCH with '${submod_branch}' for submodule '${NAME}'"
                BRANCH="${submod_branch}"
              fi
            done

            git -C "{{ .folder }}" submodule set-branch --branch ${BRANCH} -- ${MODULE_PATH}
            git -C "{{ .folder }}" submodule add --force --name "${NAME}" -- "${URL}" "${MODULE_PATH}"
            echo "submodule ${NAME} ${MODULE_PATH} head commit: " && git -C "{{ .folder }}/${MODULE_PATH}" rev-parse HEAD
        done
    git -C "{{ .folder }}" submodule update --init --recursive --checkout
    echo "After update linstor-common head commit: " && git -C "{{ .folder }}/linstor-common" rev-parse HEAD

    if ! tmp=$(git diff --name-status HEAD 2>&1) || test -n "$tmp" ; then
      echo "Auto-commit changes in .gitmodules"
      git -C "{{ .folder }}" commit -am "Auto-commit changes in .gitmodules"
    fi
{{ end }}
