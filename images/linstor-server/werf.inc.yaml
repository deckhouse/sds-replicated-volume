{{- $_ := set . "BASE_SCRATCH"    "registry.deckhouse.io/base_images/scratch@sha256:b054705fcc9f2205777d80a558d920c0b4209efdc3163c22b5bfcb5dda1db5fc" }}
{{- $_ := set . "BASE_UBUNTU"     "registry.deckhouse.io/base_images/ubuntu:jammy-20240808@sha256:e20b137325a45b9fe9f87ed718799a0728edabe05e88585f371e6864994cf0bc" }}
{{- $_ := set . "BASE_GOLANG"     "registry.deckhouse.io/base_images/golang:1.22.6-bullseye@sha256:260918a3795372a6d33225d361fe5349723be9667de865a23411b50fbcc76c5a" }}
{{- $_ := set . "BASE_ALT_P11"    "registry.deckhouse.io/base_images/alt:p11@sha256:c396cd7348a48f9236413e2ef5569223c15e554c0a3ca37f9d92fb787d4f1893" }}

{{- $linstor_version := "1.24.2" }}
# We are using Gradle version 6.9.3 because building Linstor Controller with version 7+ completes unsuccesfully with error:
# Could not set unknown property 'release' for object of type org.gradle.api.tasks.compile.CompileOptions.
{{- $gradle_version := "6.9.3" }}
{{- $api_version := "1.19.0" }}
{{- $client_version := "1.19.0" }}
{{- $common_submodule_version := "999c3c0793376f88b891eb7ef3dc8f8bc9aa26ec" }}
{{- $k8s_await_election_version := "0.3.1" }}
{{- $piraeus_version := "20e96f83f52631dc06d011b7f96293d4026236a1" }}

---
# build linstor-server.deb packages
image: {{ $.ImageName }}-server-artifact
from: {{ $.BASE_UBUNTU }}
final: false

git:
  - url: https://github.com/LINBIT/linstor-server
    add: /
    to: /linstor-server
    tag: v{{ $linstor_version }}
    stageDependencies:
      setup:
        - "**/*"

  - add: /images/{{ $.ImageName }}/patches
    to: /patches
    stageDependencies:
      setup:
        - "**/*"
shell:
  install:
    - export DEBIAN_FRONTEND=noninteractive
    - |
      apt-get update \
      && apt-get -y install --no-install-recommends build-essential debhelper git default-jdk-headless gradle python3-all wget zip rpm \
      && apt-get -y install --no-install-recommends --reinstall ca-certificates \
      && update-ca-certificates \
      && apt-get clean \
      && rm -rf /var/lib/apt/lists/*
  # We are using Gradle version 6.9.3 because building Linstor Controller with version 7+ completes unsuccesfully with error:
  # Could not set unknown property 'release' for object of type org.gradle.api.tasks.compile.CompileOptions.
  beforeSetup:
    - mkdir /opt/gradle
    - cd /opt/gradle
    - wget -q https://services.gradle.org/distributions/gradle-{{ $gradle_version }}-bin.zip
    - unzip gradle-{{ $gradle_version }}-bin.zip
    - rm gradle-{{ $gradle_version }}-bin.zip
    - ln -sf /opt/gradle/gradle-{{ $gradle_version }}/bin/gradle /usr/local/bin/gradle
  setup:
    # clone linstor-server git repo
    {{- $ctx := dict }}
    {{- $_ := set $ctx "repo" "https://github.com/LINBIT/linstor-server" }}
    {{- $_ := set $ctx "branch" (printf "v%s" $linstor_version) }}
    {{- $_ := set $ctx "folder" "/linstor-server" }}
    {{- /* .submodules is a string like "submodule1-name=submodule1-branch submodule2-name=" */}}
    {{- /* If branch is not set then using branch from .git-submodules file */}}
    {{- $_ := set $ctx "submodules" (printf "linstor-common=%s" $common_submodule_version) }}
    {{- include "utils:checkout-git" $ctx | nindent 2 }}
    # apply git patches to upstream's code
    - '[ -n "$(ls -A /patches/*.patch 2>/dev/null)" ] && git am /patches/*.patch || echo "Git patches not found. Skipped"'
    - git tag -f v{{ $linstor_version }}

    # make .deb package
    {{- $ctx := dict }}
    {{- $_ := set $ctx "name" "linstor-server" }}
    {{- $_ := set $ctx "version" $linstor_version }}
    {{- $_ := set $ctx "spec" "linstor.spec" }}
    {{- include "utils:build-rpm-pkg" $ctx | nindent 2 }}
    # some cleanup
    - rm -rf /root/.gradle/caches/
    - ls -la /
    - exit 5

---
image: {{ $.ImageName }}-client-artifact
from: {{ $.BASE_UBUNTU }}
final: false

git:
  - url: https://github.com/LINBIT/linstor-api-py
    add: /
    to: /linstor-api-py
    tag: v{{ $api_version }}
    stageDependencies:
      setup:
        - "**/*"

  - url: https://github.com/LINBIT/linstor-client
    add: /
    to: /linstor-client
    tag: v{{ $client_version }}
    stageDependencies:
      setup:
        - "**/*"

shell:
  install:
    - export DEBIAN_FRONTEND=noninteractive
    - |
      apt-get update \
      && apt-get -y install --no-install-recommends build-essential debhelper git python3-all python3-setuptools help2man bash-completion docbook-xsl xsltproc dh-python \
      && apt-get -y install --no-install-recommends --reinstall ca-certificates \
      && update-ca-certificates \
      && apt-get clean \
      && rm -rf /var/lib/apt/lists/*
  setup:
    # clone linstor-api-py git repo
    {{- $ctx := dict }}
    {{- $_ := set $ctx "repo" "https://github.com/LINBIT/linstor-api-py" }}
    {{- $_ := set $ctx "branch" (printf "v%s" $api_version) }}
    {{- $_ := set $ctx "folder" "/linstor-api-py" }}
    {{- /* .submodules is a string like "submodule1-name=submodule1-branch submodule2-name=" */}}
    {{- /* If branch is not set then using branch from .git-submodules file */}}
    {{- $_ := set $ctx "submodules" (printf "linstor-common=%s" $common_submodule_version) }}
    {{- include "utils:checkout-git" $ctx | nindent 2 }}

    # make .deb package
    {{- $ctx := dict }}
    {{- $_ := set $ctx "name" "python-linstor" }}
    {{- $_ := set $ctx "version" $api_version }}
    {{- $_ := set $ctx "gen_path" "./dist" }}
    {{- include "utils:build-deb-pkg" $ctx | nindent 2 }}

    - rm -rf /linstor-api-py && mv /{{ $ctx.name }}-{{ $ctx.version }} /linstor-api-py

    # clone linstor-client git repo
    {{- $ctx := dict }}
    {{- $_ := set $ctx "repo" "https://github.com/LINBIT/linstor-client" }}
    {{- $_ := set $ctx "branch" (printf "v%s" $client_version) }}
    {{- $_ := set $ctx "folder" "/linstor-client" }}
    {{- /* .submodules is a string like "submodule1-name=submodule1-branch submodule2-name=" */}}
    {{- /* If branch is not set then using branch from .git-submodules file */}}
    {{- /* $_ := set $ctx "submodules" (printf "linstor-common=%s" $common_submodule_version) */}}
    {{- include "utils:checkout-git" $ctx | nindent 2 }}

    # make .deb package
    {{- $ctx := dict }}
    {{- $_ := set $ctx "name" "linstor-client" }}
    {{- $_ := set $ctx "version" $client_version }}
    {{- $_ := set $ctx "gen_path" "./dist" }}
    {{- include "utils:build-deb-pkg" $ctx | nindent 2 }}

    - ls -la /

---
image: {{ $.ImageName }}-k8s-await-election-artifact
from: {{ $.BASE_GOLANG }}
final: false

git:
  - url: https://github.com/LINBIT/k8s-await-election
    add: /
    to: /usr/local/go/k8s-await-election
    tag: v{{ $k8s_await_election_version }}
    stageDependencies:
      setup:
        - "**/*"
shell:
  setup:
    - cd /usr/local/go/k8s-await-election
    - make
    - mv ./out/k8s-await-election-amd64 /k8s-await-election

---
# extract all packages into this artifact
image: {{ $.ImageName }}-packages-artifact
from: {{ $.BASE_UBUNTU }}
final: false
git:
  - add: /images/scripts
    to: /
    stageDependencies:
      setup:
        - "**/*"
import:
  - image: {{ $.ImageName }}-server-artifact
    add: /
    to: /packages
    includePaths:
      - linstor-common_*.deb
      - linstor-controller_*.deb
      - linstor-satellite_*.deb
    before: setup

  - image: {{ $.ImageName }}-client-artifact
    add: /
    to: /packages
    includePaths:
      - python-linstor_*.deb
      - linstor-client_*.deb
    before: setup

  - image: drbd-reactor-utils-artifact
    add: /
    # to /drbd-utils instead of /packages because of Conflict between imports! (with linstor-server-client-artifact) in Werf :-(
    to: /drbd-utils
    includePaths:
      - python-linstor_*.deb
      - drbd-utils_*.deb
      - thin-send-recv_*.deb
    before: setup

shell:
  install:
    - export DEBIAN_FRONTEND=noninteractive
    # install packages required by deb2distroless script
    # https://salsa.debian.org/apt-team/apt-file
    - |
      apt-get update \
      && apt-get -y install --no-install-recommends binutils zstd apt-file \
      && apt-file update -a amd64 \
      && apt-get clean
  setup:
    - mv /drbd-utils/* /packages/
    - |
      for f in /packages/*.deb; do
        /deb2distroless.sh -e /relocate -d /downloaded-cache $f
      done
      # now install (post-process) all downloaded depends
      /deb2distroless.sh -e /relocate -d /downloaded-cache --post-process
    # cleanup
    - rm -rf /var/lib/apt/lists/*
    - ls -la /relocate

---
# main image based on AltLinux for now because we need bash and other tools
image: {{ $.ImageName }}
from: {{ $.BASE_ALT_P11 }}
git:
  - add: /images/{{ $.ImageName }}
    to: /utils
    stageDependencies:
      install:
        - "**/*"

import:
  # - image: {{ $.ImageName }}-server-artifact
  #   add: /
  #   to: /packages
  #   includePaths:
  #     - linstor-common_*.deb
  #     - linstor-controller_*.deb
  #     - linstor-satellite_*.deb
  #   before: setup

  # - image: {{ $.ImageName }}-client-artifact
  #   add: /
  #   to: /packages
  #   includePaths:
  #     - python-linstor_*.deb
  #     - linstor-client_*.deb
  #   before: setup

  # - image: drbd-reactor-utils-artifact
  #   add: /
  #   # to: /drbd-utils instead of /packages because of Conflict between imports! (with linstor-server-client-artifact) in Werf :-(
  #   to: /drbd-utils
  #   includePaths:
  #     - python-linstor_*.deb
  #     - drbd-utils_*.deb
  #     - thin-send-recv_*.deb
  #   before: setup

  - image: {{ $.ImageName }}-k8s-await-election-artifact
    add: /
    to: /usr/bin
    includePaths:
      - k8s-await-election
    before: setup

  # - image: {{ $.ImageName }}-packages-artifact
  #   add: /relocate
  #   to: /relocate
  #   before: setup
shell:
  # add some scripts to image to be able to use them
  install:
    # Add liveness probe scripts
    - cp /utils/liveness.sh /liveness.sh && cp /utils/liveness-satellite.sh /liveness-satellite.sh
    - chmod 755 /liveness.sh /liveness-satellite.sh

    # Add wrapper for linstor client with only allowed commands
    - cp /utils/client-wrapper.sh /usr/local/bin/linstor && chmod 755 /usr/local/bin/linstor

    # Script for cleaner sidecar
    - cp /utils/cleaner.py /cleaner.py && chmod 755 /cleaner.py


  # just a list with AltLinux's packages replaces Ubuntu's ones

  # Ubuntu package       | AltLinux package
  #########################################
  # iputils-ping         | iputils
  # dnsutils             | bind-utils
  # nvme-cli             | nvme
  # zfsutils-linux       | zfs-utils
  # default-jre-headless | java-11-openjdk-headless
  # python3-all          | python3
  # python3-natsort      | python3-module-natsort

  setup:
    # Source https://github.com/piraeusdatastore/piraeus/blob/master/dockerfiles/piraeus-server/Dockerfile
    - |
      { echo 'APT::Install-Recommends "false";' ; echo 'APT::Install-Suggests "false";' ; } > /etc/apt/apt.conf.d/99_piraeus
    # Enable contrib repos for zfsutils
    - sed -r -i 's/^deb(.*)$/deb\1 contrib/' /etc/apt/sources.list
    - apt-get update
    - |
      # Install useful utilities and general dependencies

      apt-get install -y udev drbd-utils jq net-tools iputils iproute2 bind-utils netcat sysstat curl util-linux
      # Install dependencies for optional features
      # cryptsetup: luks layer
      # e2fsprogs: LINSTOR can create file systems
      # lsscsi: exos layer
      # lvm2: manage lvm storage pools
      # multipath-tools: exos layer
      # nvme-cli: nvme layer
      # procps: used by LINSTOR to find orphaned send/receive processes
      # socat: used with thin-send-recv to send snapshots to another LINSTOR cluster
      # xfsprogs: LINSTOR can create file systems; xfs deps
      # zstd: used with thin-send-recv to send snapshots to another LINSTOR cluster
      # zfsutils-linux: for zfs storage pools

      # using echo 'Yes, do as I say!' and --force-yes to ignore these warnings:
      # WARNING: The following essential packages will be removed
      # This should NOT be done unless you know exactly what you are doing!
      # sysvinit
      echo 'Yes, do as I say!' | apt-get install -y --force-yes cryptsetup e2fsprogs lsscsi lvm2 multipath-tools nvme procps socat xfsprogs zstd zfs-utils

    - |
      ln -sf /proc/mounts /etc/mtab
      sed -i 's/udev_rules.*=.*/udev_rules=0/ ; s/udev_sync.*=.*/udev_sync=0/ ; s/obtain_device_list_from_udev.*=.*/obtain_device_list_from_udev=0/' /etc/lvm/lvm.conf
      sed -i '/^devices {/a global_filter = [ "r|^/dev/drbd|", "r|^/dev/loop[0-9]+|" ]' /etc/lvm/lvm.conf

    # Install linstor-server
    - |
      apt-get install -y java-11-openjdk-headless thin-provisioning-tools python3 python3-module-natsort
      # .deb-packages "installed" (more pricesely just extracted) in packages-artifact
      # dpkg -i packages/*.deb
      sed -i 's/usage-count yes;/usage-count no;/' /etc/drbd.d/global_common.conf \

    # Log directory need to be group writable. OpenShift assigns random UID and GID, without extra RBAC changes we can only influence the GID.
    - |
      mkdir /var/log/linstor-controller &&
      chown 0:1000 /var/log/linstor-controller &&
      chmod -R 0775 /var/log/linstor-controller &&
      # Ensure we log to files in containers, otherwise SOS reports won't show any logs at all
      sed -i 's#<!-- <appender-ref ref="FILE" /> -->#<appender-ref ref="FILE" />#' /usr/share/linstor-server/lib/conf/logback.xml

    # install piraeus-entry
    - |
      curl -Lfo /usr/bin/piraeus-entry.sh https://github.com/piraeusdatastore/piraeus/raw/{{ $piraeus_version }}/dockerfiles/piraeus-server/entry.sh
      chmod +x /usr/bin/piraeus-entry.sh

    - mv /usr/bin/linstor /usr/bin/originallinstor

    # cleanup phase
    - |
      # remove udev, no need for it in the container
      apt-get remove -y udev
      apt-get clean
      rm -rf /var/lib/apt/lists/*

docker:
  # controller: 3376/tcp 3377/tcp 3370/tcp 3371/tcp
  # satellite: 3366/tcp 3367/tcp
  EXPOSE: ["3376/tcp", "3377/tcp", "3370/tcp", "3371/tcp", "3366/tcp", "3367/tcp"]
  ENTRYPOINT: ["/usr/bin/k8s-await-election", "/usr/bin/piraeus-entry.sh"]
  CMD: ["startSatellite"]
  LABEL:
    distro: all
    version: all
    linstor-server: {{ $linstor_version }}
    linstor-api-py: {{ $api_version }}
    linstor-client: {{ $client_version }}
    linstor-common: {{ $common_submodule_version }}
    k8s-await-election: {{ $k8s_await_election_version }}
    piraeus-entry: {{ $piraeus_version }}
