{{- $_ := set . "BASE_SCRATCH"    "registry.deckhouse.io/base_images/scratch@sha256:b054705fcc9f2205777d80a558d920c0b4209efdc3163c22b5bfcb5dda1db5fc" }}
{{- $_ := set . "BASE_UBUNTU"     "registry.deckhouse.io/base_images/ubuntu:jammy-20240808@sha256:e20b137325a45b9fe9f87ed718799a0728edabe05e88585f371e6864994cf0bc" }}
{{- $_ := set . "BASE_PYTHON"     "registry.deckhouse.io/base_images/python:3.7.16-alpine3.16@sha256:054c898ee5eacb0b3d85bdb603d6229b93619964cc01be5274acdf3e451e5ef8" }}
{{- $_ := set . "BASE_ALT_P11"    "registry.deckhouse.io/base_images/alt:p11@sha256:c396cd7348a48f9236413e2ef5569223c15e554c0a3ca37f9d92fb787d4f1893" }}

{{- $utils_version := "9.28.0" }}
{{- $thin_send_recv_version := "1.0.1" }}
{{- $reactor_version := "1.4.0" }}

---
# build drbd-utils .deb packages
image: {{ $.ImageName }}-utils-artifact
from: {{ $.BASE_ALT_P11 }}
final: false

git:
  - url: https://github.com/LINBIT/drbd-utils
    add: /
    to: /drbd-utils
    tag: v{{ $utils_version }}
    stageDependencies:
      setup:
        - "**/*"

  - url: https://github.com/LINBIT/thin-send-recv
    add: /
    to: /thin-send-recv
    tag: v{{ $thin_send_recv_version }}
    stageDependencies:
      setup:
        - "**/*"

shell:
  beforeInstall:
    - export DEBIAN_FRONTEND=noninteractive
    - |
      apt-get update \
      && apt-get -y install build-essential rpm-build rpm-macros-intro-conflicts sudo git flex clitest xsltproc locales libxml2 po4a bash-completion docbook-xsl udev asciidoctor libkeyutils-devel \
      && apt-get -y install ca-certificates \
      && update-ca-trust \
      && apt-get clean \
      && rm -rf /var/lib/apt/lists/*
  install:
    {{- $ctx := dict }}
    {{- include "utils:prepare-rpm-build" $ctx | nindent 2 }}
  beforeSetup:
    - sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen && locale-gen
    - export LANG=en_US.UTF-8 LANGUAGE=en_US:en LC_ALL=en_US.UTF-8
  setup:
    # clone drbd-utils git repo
    {{- $ctx := dict }}
    {{- $_ := set $ctx "repo" "https://github.com/LINBIT/drbd-utils" }}
    {{- $_ := set $ctx "branch" (printf "v%s" $utils_version) }}
    {{- $_ := set $ctx "folder" "/drbd-utils" }}
    {{- include "utils:checkout-git" $ctx | nindent 2 }}

    - install /dev/null /usr/local/bin/lbvers.py
    - ./autogen.sh && ./configure --without-manual && ./configure --enable-spec --without-manual
    # substitute ubuntu packages with ALTLinux's ones
    - sed -i -e 's/keyutils-libs-devel/libkeyutils-devel/g' drbd.spec
    # try fix error with brp-alt (https://lists.altlinux.org/pipermail/devel/2019-March/207454.html https://bugzilla.altlinux.org/10382):
    # 028-check_contents.brp: ERROR: Contents of files listed above match pattern                                                â†µ
    # /var/lib/(cache|lib|lock|log|nis|run|spool|www|yp)/
    #- sed -i -e '8i %define _localstatedir %_var' drbd.spec
    # No such file or directory: /tmp/.private/rpmbuilder/drbd-buildroot/usr/lib/systemd/system/drbd.service
    # - sed -i -e '8i %global debug_package %{nil}' drbd.spec

    # make .rpm package
    {{- $ctx := dict }}
    {{- $_ := set $ctx "name" "drbd-utils" }}
    {{- $_ := set $ctx "version" $utils_version }}
    {{- $_ := set $ctx "spec" "drbd.spec" }}
    {{- $_ := set $ctx "arch" "x86_64" }}
    # set initscripttype explicitly for workaround errors like 'No such file or directory: /tmp/.private/rpmbuilder/drbd-buildroot/usr/lib/systemd/system/drbd@.service'
    # PS. ./configure --with-initscripttype=sysv does not work for some reason
    {{- $_ := set $ctx "rpmbuild_args" "--without=manual --define \\'initscripttype sysv\\'" }}
    {{- include "utils:build-rpm-pkg" $ctx | nindent 2 }}

    # clone thin-send-recv git repo
    {{- $ctx := dict }}
    {{- $_ := set $ctx "repo" "https://github.com/LINBIT/thin-send-recv" }}
    {{- $_ := set $ctx "branch" (printf "v%s" $thin_send_recv_version) }}
    {{- $_ := set $ctx "folder" "/thin-send-recv" }}
    {{- include "utils:checkout-git" $ctx | nindent 2 }}

    # make .deb package
    {{- $ctx := dict }}
    {{- $_ := set $ctx "name" "thin-send-recv" }}
    {{- $_ := set $ctx "version" $thin_send_recv_version }}
    {{- include "utils:build-deb-pkg" $ctx | nindent 2 }}

    - ls -la /
    # drbd-utils_9.28.0-1_amd64.deb

---
# build drbd-reactor .deb packages
image: {{ $.ImageName }}-reactor-artifact
from: {{ $.BASE_UBUNTU }}
final: false

git:
  - url: https://github.com/LINBIT/drbd-reactor
    add: /
    to: /drbd-reactor
    tag: v{{ $reactor_version }}
    stageDependencies:
      setup:
        - "**/*"

  # - add: /images/{{ $.ImageName }}/patches
  #   to: /patches
shell:
  install:
    - export DEBIAN_FRONTEND=noninteractive
    - |
      apt-get update \
      && apt-get -y install --no-install-recommends build-essential debhelper git cargo rustc dh-python bash-completion \
      && apt-get -y install --no-install-recommends --reinstall ca-certificates \
      && update-ca-certificates \
      && apt-get clean \
      && rm -rf /var/lib/apt/lists/*
  setup:
      # Clone just the repository's .git folder
    - git clone --no-checkout --depth 1 --branch v{{ $reactor_version }} https://github.com/LINBIT/drbd-reactor /git-repo.tmp
      # Move the .git folder to the directory with the files.
    - mv /git-repo.tmp/.git drbd-reactor/
      # Delete the temporary directory
    - rmdir /git-repo.tmp
    - cd /drbd-reactor
      # git thinks all files are deleted, this reverts the state of the repo to HEAD.
      # WARNING: any local changes to the files will be lost.
    - git reset --hard HEAD
    - install /dev/null /usr/local/bin/lbvers.py
    - make debrelease VERSION={{ $reactor_version }}
    - mv drbd-reactor-{{ $reactor_version }}.tar.gz ../drbd-reactor_$(echo {{ $reactor_version }} | tr '-' '~').orig.tar.gz
    - tar -C / -xvf ../drbd-reactor_$(echo {{ $reactor_version }} | tr '-' '~').orig.tar.gz
    - |
      cd /drbd-reactor-{{ $reactor_version }}
      dpkg-buildpackage -us -uc
      ls -la /

---
# get drbd-utils and drbd-reactor packages and install it into this artifact
image: {{ $.ImageName }}-packages-artifact
from: {{ $.BASE_UBUNTU }}
final: false
git:
  - add: /images/scripts
    to: /
    stageDependencies:
      setup:
        - "**/*"
import:
  - image: {{ $.ImageName }}-utils-artifact
    add: /
    to: /packages
    includePaths:
      - python-linstor_*.deb
      - drbd-utils_*.deb
      - thin-send-recv_*.deb
    before: setup

  - image: {{ $.ImageName }}-reactor-artifact
    add: /
    to: /packages
    includePaths:
      - drbd-reactor_*.deb
    before: setup

shell:
  install:
    - export DEBIAN_FRONTEND=noninteractive
    # install packages required by deb2distroless script
    # https://salsa.debian.org/apt-team/apt-file
    - |
      apt-get update \
      && apt-get -y install --no-install-recommends binutils zstd apt-file \
      && apt-file update -a amd64 \
      && apt-get clean
  setup:
    - |
      for f in /packages/*.deb; do
        /deb2distroless.sh -e /relocate -d /downloaded-cache $f
      done
      # now install (post-process) all downloaded depends
      /deb2distroless.sh -e /relocate -d /downloaded-cache --post-process
    - sed -i 's/usage-count yes;/usage-count no;/' /relocate/etc/drbd.d/global_common.conf
    # cleanup
    - rm -rf /var/lib/apt/lists/*
    - ls -la /relocate

---
# main distroless image
image: {{ $.ImageName }}
# TODO: test why python3-toml package is needed in runtime image
from: {{ $.BASE_SCRATCH }}

import:
  - image: {{ $.ImageName }}-packages-artifact
    add: /relocate
    to: /
    before: setup
docker:
  ENTRYPOINT: ["/usr/sbin/drbd-reactor"]
  LABEL:
    distro: all
    version: all
    drbd-utils: {{ $utils_version }}
    drbd-reactor: {{ $reactor_version }}
