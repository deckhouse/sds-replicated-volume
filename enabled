#!/bin/bash

source /deckhouse/shell_lib.sh

function __main__() {
  enabled::disable_module_if_cluster_is_not_bootstraped
  enabled::disable_module_in_kubernetes_versions_less_than 1.23.0

  if values::array_has global.enabledModules "linstor" ; then
    echo "You must disable the linstor module for the module to work."
    echo "false" > "$MODULE_ENABLED_RESULT"
    exit 0
  fi

  if [ "$(kubectl get moduleconfig linstor -o jsonpath={.spec.settings.dataNodes})" ]; then
    linstor_settings=$(kubectl get moduleconfig linstor -o jsonpath={.spec.settings.dataNodes})
    sds_replicated_volume_settings=$(kubectl get moduleconfig sds-replicated-volume -o jsonpath={.spec.settings.dataNodes})
    if [ "$linstor_settings" != "$sds_replicated_volume_settings" ]; then
      if [ -z "$(kubectl get moduleconfig sds-replicated-volume -o jsonpath={.spec.version})" ]; then
        kubectl patch moduleconfig sds-replicated-volume --type=json -p '[{op: "add", path: "/spec/version", value: 1}]'
      fi
      if [ -z "$(kubectl get moduleconfig sds-replicated-volume -o jsonpath={.spec.settings})" ]; then
        kubectl patch moduleconfig sds-replicated-volume --type=json -p "$(kubectl get moduleconfig linstor -o json | jq '[{op: "add", path: "/spec/settings", value: .spec.settings}]')"
      else
        kubectl patch moduleconfig sds-replicated-volume --type=json -p "$(kubectl get moduleconfig linstor -o json | jq '[{op: "replace", path: "/spec/settings/dataNodes", value: .spec.settings.dataNodes}]')"
      fi
    fi
  fi

  if ! values::array_has global.enabledModules "sds-node-configurator" ; then
    echo "You must enable the sds-node-configurator module for the module to work."
    echo "false" > "$MODULE_ENABLED_RESULT"
  else
    echo "true" > "$MODULE_ENABLED_RESULT"
  fi
}

enabled::run $@
